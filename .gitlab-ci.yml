# Official framework image. Look for the different tagged releases at: https://hub.docker.com/r/library/node/tags/
variables:
  CONFIG_PACKAGE_NAME: sif-core
  RUSH_PARALLELISM: 8
  APP_CONFIG_DIR: common/build/configdir
  BRANCH: main

.staging-variables: &staging-variables
  ENVIRONMENT: staging
  AWS_REGION: us-west-2

.prod-variables: &prod-variables
  ENVIRONMENT: production
  AWS_REGION: us-west-2

.milestone-variables: &milestone-variables
  ENVIRONMENT: staging
  AWS_REGION: us-east-2

.main-run-condition: &main-run-condition
  - if: ($CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE != /.*\[skip ci\].*/)

.milestone-run-condition: &milestone-run-condition
  - if: ($CI_COMMIT_BRANCH == $MILESTONE_BRANCH && $CI_COMMIT_MESSAGE != /.*\[skip ci\].*/)

.branch-run-condition: &branch-run-condition
  - if: ($CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != $MILESTONE_BRANCH)

.branch-run-integration-condition: &branch-run-integration-condition
  - if: ($CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH != "main" && $ENVIRONMENT != null && $AWS_REGION != null && $CLEANUP == null)

.branch-run-cleanup-condition: &branch-run-cleanup-condition
  - if: ($CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH != "main" && $ENVIRONMENT != null && $AWS_REGION != null && $CLEANUP == "true")

.common-build-steps: &common-build-steps # install dependencies
  - pushd ${CI_PROJECT_DIR}/typescript/packages
  - rush update
  - rush build
  - popd

.common-git-steps: &common-git-steps # set up the git credentials
  - git config --global user.name "gitlab-ci-token"
  - git config --global user.email "gitlab-ci-token"
  - git remote set-url origin https://gitlab-ci-token:$PROJECT_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git

.common-install-deployment-dependencies: &common-install-deployment-dependencies
  - yum update -y
  - yum install -y git tar openssl zip unzip jq
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip -qq awscliv2.zip
  - ./aws/install && rm -rf ./aws && rm awscliv2.zip
  - curl -s -qL -o /usr/bin/jq https://github.com/jqlang/jq/releases/download/jq-1.6/jq-linux64
  - chmod +x /usr/bin/jq
  - npm install -g @microsoft/rush esbuild@0.14 aws-cdk
  - cdk --version

.common-install-gitlfs: &common-install-gitlfs
  - yum install -y amazon-linux-extras
  - amazon-linux-extras install epel -y
  - yum update -y
  - yum install -y git-lfs

.common-install-java-dependencies: &common-install-java-dependencies
  - yum update -y
  - yum install -y git tar zip unzip jq curl openssl gcc-c++ make java-17-amazon-corretto-devel
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip -qq awscliv2.zip
  - ./aws/install && rm -rf ./aws && rm awscliv2.zip
  - curl -s -qL -o /usr/bin/jq https://github.com/jqlang/jq/releases/download/jq-1.6/jq-linux64
  - chmod +x /usr/bin/jq
  - npm install -g @microsoft/rush esbuild@0.14 aws-cdk@2.87.0
  - cdk --version
  - java --version
  - curl "https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.6/apache-maven-3.8.6-bin.tar.gz" -o "maven.tar.gz" && tar -xf maven.tar.gz -C /opt
  - ln -s /opt/apache-maven-3.8.6 /opt/maven
  - export M2_HOME=/opt/maven && export MAVEN_HOME=/opt/maven && export PATH=${M2_HOME}/bin:${PATH}
  - mvn --version

.common-artifacts: &common-artifacts
  artifacts:
    paths:
      - source/common/
      - source/infrastructure/**/build.zip
      - source/packages/**/.rush/
      - source/packages/**/dist/
      - source/packages/**/tsconfig.tsbuildinfo
      - source/packages/**/bundle.zip

stages:
  - test
  - deployStage
  - integrationTest
  - deployProd
  # stages below will only be executed in branch and not main
  - deployBranch
  - integrationTestBranch
  - destroyBranch

default:
  image:
    name: public.ecr.aws/lambda/nodejs:18
    entrypoint: [ '' ]
  before_script:
    - *common-install-deployment-dependencies

# Below is deployment step for milestone branch

build-run-docker-image-milestone:
  rules:
    - *milestone-run-condition
  stage: deployStage
  variables:
    AWS_REGION: us-east-2
    CI_REGISTRY_IMAGE: ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/schema-migrator
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  before_script:
    - echo "overriding the default before_script stage"
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"credsStore\":\"ecr-login\"}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/typescript/packages/apps/schema-migrator"
      --dockerfile "${CI_PROJECT_DIR}/typescript/packages/apps/schema-migrator/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:latest"

test-milestone:
  rules:
    - *milestone-run-condition
  stage: test
  needs: [ ]
  script:
    - *common-git-steps
    - *common-build-steps
    - rush test

deploy-platform-milestone:
  image:
    name: public.ecr.aws/lambda/nodejs:18
    entrypoint: [ '' ]
  before_script:
    - *common-install-java-dependencies
    - *common-install-gitlfs
  rules:
    - *milestone-run-condition
  stage: deployStage
  variables:
    <<: *milestone-variables
  needs: [ 'test-milestone' ]
  script:
    - *common-build-steps
    - pushd infrastructure/platform
    - cdk deploy -c repositoryName=schema-migrator -c repositoryArn=arn:aws:ecr:${AWS_REGION}:${ACCOUNT_ID}:repository/schema-migrator -c includeCaml=true -c imageTag=latest -c rdsConcurrencyLimit=10 -c deleteBucket=true -c clusterDeletionProtection=false  -c environment=$ENVIRONMENT  --require-approval never --concurrency=5 --r $AWS_CREDS_TARGET_ROLE
    - popd

deploy-tenant-milestone:
  image:
    name: public.ecr.aws/lambda/nodejs:18
    entrypoint: [ '' ]
  before_script:
    - *common-install-java-dependencies
  rules:
    - *milestone-run-condition
  stage: deployStage
  variables:
    <<: *milestone-variables
  needs: [ 'deploy-platform-milestone' ]
  script:
    - *common-build-steps
    - pushd infrastructure/tenant
    - cdk synth -c includeCaml=true -c deleteBucket=true -c auditFileProcessingTime=1 -c enableDeleteResource=true -c tenantId=$TENANT_ID -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL -c outgoingTenantPaths=$TENANT_ID-shared:/shared --require-approval never --concurrency=5 --r $AWS_CREDS_TARGET_ROLE --all
    - cdk deploy --app cdk.out -c includeCaml=true -c deleteBucket=true -c auditFileProcessingTime=1 -c enableDeleteResource=true -c tenantId=$TENANT_ID -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL -c outgoingTenantPaths=$TENANT_ID-shared:/shared --require-approval never --concurrency=5  --r $AWS_CREDS_TARGET_ROLE --all
    - cdk synth -c deleteBucket=true -c auditFileProcessingTime=1 -c enableDeleteResource=true -c tenantId=$TENANT_ID-shared -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL -c externallySharedGroupIds=/shared --require-approval never --r $AWS_CREDS_TARGET_ROLE  --concurrency=5  --all
    - cdk deploy --app cdk.out -c deleteBucket=true -c auditFileProcessingTime=1 -c enableDeleteResource=true -c tenantId=$TENANT_ID-shared -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL -c externallySharedGroupIds=/shared --require-approval never --concurrency=5  --r $AWS_CREDS_TARGET_ROLE --all
    - popd

integrationTest-milestone:
  rules:
    - *milestone-run-condition
  stage: integrationTest
  variables:
    <<: *milestone-variables
  needs: [ 'deploy-tenant-milestone' ]
  script:
    - *common-build-steps
    # set up the correct cleanrooms membership id
    - export CLEANROOMS_MEMBERSHIP_ID=$CLEANROOMS_MEMBERSHIP_ID_MILESTONE
    - pushd infrastructure/tenant
    - source ./src/utils/build.sh $TENANT_ID $ENVIRONMENT $TENANT_ID-shared
    - aws cognito-idp admin-set-user-password --user-pool-id $COGNITO_USER_POOL_ID --username $ADMINISTRATOR_EMAIL --password $ADMIN_USER_PASSWORD --permanent
    - popd
    - pushd typescript/packages/integrationTests
    - rushx test:integration
    - popd
    - *common-git-steps

# Below is deployment step for main branch
build-run-docker-image:
  rules:
    - *main-run-condition
  stage: deployStage
  variables:
    AWS_REGION: us-west-2
    CI_REGISTRY_IMAGE: ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/schema-migrator
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  before_script:
    - echo "overriding the default before_script stage"
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"credsStore\":\"ecr-login\"}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/typescript/packages/apps/schema-migrator"
      --dockerfile "${CI_PROJECT_DIR}/typescript/packages/apps/schema-migrator/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:latest"

test:
  rules:
    - *main-run-condition
  stage: test
  needs: [ ]
  script:
    - *common-git-steps
    - bash -c cicd/increment_version.bash
    - *common-build-steps
    - rush test

deploy-platform:
  image:
    name: public.ecr.aws/lambda/nodejs:18
    entrypoint: [ '' ]
  before_script:
    - *common-install-java-dependencies
    - *common-install-gitlfs
  rules:
    - *main-run-condition
  stage: deployStage
  variables:
    <<: *staging-variables
  needs: [ 'test' ]
  script:
    - *common-build-steps
    - pushd infrastructure/platform
    - cdk deploy -c repositoryName=schema-migrator -c includeCaml=true -c repositoryArn=arn:aws:ecr:${AWS_REGION}:${ACCOUNT_ID}:repository/schema-migrator -c imageTag=latest -c rdsConcurrencyLimit=10 -c deleteBucket=true -c clusterDeletionProtection=false  -c environment=$ENVIRONMENT  --require-approval never --concurrency=5 --r $AWS_CREDS_TARGET_ROLE
    - popd

deploy-tenant:
  image:
    name: public.ecr.aws/lambda/nodejs:18
    entrypoint: [ '' ]
  before_script:
    - *common-install-java-dependencies
  rules:
    - *main-run-condition
  stage: deployStage
  variables:
    <<: *staging-variables
  needs: [ 'deploy-platform' ]
  script:
    - *common-build-steps
    - pushd infrastructure/tenant
    - cdk synth -c deleteBucket=true -c includeCaml=true -c auditFileProcessingTime=1 -c enableDeleteResource=true -c tenantId=$TENANT_ID -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL -c outgoingTenantPaths=$TENANT_ID-shared:/shared --require-approval never --concurrency=5 --r $AWS_CREDS_TARGET_ROLE --all
    - cdk deploy --app cdk.out -c includeCaml=true -c deleteBucket=true -c auditFileProcessingTime=1 -c enableDeleteResource=true -c tenantId=$TENANT_ID -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL -c outgoingTenantPaths=$TENANT_ID-shared:/shared --require-approval never --concurrency=5  --r $AWS_CREDS_TARGET_ROLE --all
    - cdk synth -c deleteBucket=true -c auditFileProcessingTime=1 -c enableDeleteResource=true -c tenantId=$TENANT_ID-shared -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL -c externallySharedGroupIds=/shared --require-approval never --r $AWS_CREDS_TARGET_ROLE  --concurrency=5  --all
    - cdk deploy --app cdk.out -c deleteBucket=true -c auditFileProcessingTime=1 -c enableDeleteResource=true -c tenantId=$TENANT_ID-shared -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL -c externallySharedGroupIds=/shared --require-approval never --concurrency=5  --r $AWS_CREDS_TARGET_ROLE --all
    - popd


integrationTest:
  rules:
    - *main-run-condition
  stage: integrationTest
  variables:
    <<: *staging-variables
  needs: [ 'deploy-tenant' ]
  script:
    - *common-build-steps
    - pushd infrastructure/tenant
    - source ./src/utils/build.sh $TENANT_ID $ENVIRONMENT $TENANT_ID-shared
    - aws cognito-idp admin-set-user-password --user-pool-id $COGNITO_USER_POOL_ID --username $ADMINISTRATOR_EMAIL --password $ADMIN_USER_PASSWORD --permanent
    - popd
    - pushd typescript/packages/integrationTests
    - rushx test:integration
    - popd
    - *common-git-steps
    - bash -c cicd/tag_repository.bash

deployCoreProd:
  image:
    name: public.ecr.aws/lambda/nodejs:18
    entrypoint: [ '' ]
  before_script:
    - *common-install-java-dependencies
  rules:
    - *main-run-condition
  stage: deployProd
  variables:
    <<: *prod-variables
  needs: [ 'integrationTest' ]
  script:
    - *common-build-steps
    - pushd infrastructure/platform
    - cdk deploy -c repositoryName=schema-migrator -c repositoryArn=arn:aws:ecr:${AWS_REGION}:${ACCOUNT_ID}:repository/schema-migrator -c imageTag=latest -c rdsConcurrencyLimit=10 -c deleteBucket=true -c clusterDeletionProtection=false  -c environment=$ENVIRONMENT  --require-approval never --concurrency=5 --r $AWS_CREDS_TARGET_ROLE
    - popd
    - pushd infrastructure/tenant
    - cdk synth -c deleteBucket=true -c auditFileProcessingTime=1 -c enableDeleteResource=true -c tenantId=$TENANT_ID -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL --require-approval never  --r $AWS_CREDS_TARGET_ROLE  --concurrency=5  --all
    - cdk deploy --app cdk.out -c deleteBucket=true -c auditFileProcessingTime=1 -c enableDeleteResource=true -c tenantId=$TENANT_ID -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL --all --require-approval never --concurrency=5  --r $AWS_CREDS_TARGET_ROLE
    - popd
    - *common-git-steps
    - bash -c cicd/tag_repository.bash

# Below actions are only executed in branches other than main
branchTest:
  rules:
    - *branch-run-condition
  stage: test
  script:
    # only run rush change for non dependabot PR
    - if [[ "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" != dependabot* ]] ; then rush change --verify; fi;
    - *common-build-steps
    - rush test

branchTestCalculator:
  image:
    name: public.ecr.aws/lambda/nodejs:18
    entrypoint: [ '' ]
  before_script:
    - *common-install-java-dependencies
  rules:
    - *branch-run-condition
  stage: test
  script:
    - cd java/apps/calculator
    - mvn clean install -X

branchTestIndexer:
  image:
    name: public.ecr.aws/lambda/nodejs:18
    entrypoint: [ '' ]
  before_script:
    - *common-install-java-dependencies
  rules:
    - *branch-run-condition
  stage: test
  script:
    - cd java/apps/referencedatasets-indexer
    - mvn clean install -X

deployBranch:
  stage: deployBranch
  rules:
    - *branch-run-integration-condition
  script:
    - echo "run deploy branch"
    - *common-build-steps
    - pushd packages/infrastructure/platform
    - cdk deploy -c deleteBucket=true -c clusterDeletionProtection=false  -c environment=$ENVIRONMENT  --require-approval never --concurrency=5 --r $AWS_CREDS_TARGET_ROLE
    - popd
    - pushd packages/infrastructure/tenant
    - cdk deploy -c auditFileProcessingTime=1 -c enableDeleteResource=true  -c deleteBucket=true -c tenantId=$TENANT_ID -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL -c outgoingTenantPaths=$TENANT_ID-shared:/shared --require-approval never --concurrency=5  --r $AWS_CREDS_TARGET_ROLE --all
    - cdk deploy -c auditFileProcessingTime=1 -c enableDeleteResource=true  -c deleteBucket=true -c tenantId=$TENANT_ID-shared -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL -c externallySharedGroupIds=/shared --require-approval never --concurrency=5  --r $AWS_CREDS_TARGET_ROLE --all
    - popd

integrationTestBranch:
  rules:
    - *branch-run-integration-condition
  stage: integrationTestBranch
  script:
    - *common-build-steps
    - pushd packages/infrastructure/tenant
    - export AWS_DEFAULT_REGION=$AWS_REGION
    - source ./src/utils/build.sh $TENANT_ID $ENVIRONMENT $TENANT_ID-shared
    - aws cognito-idp admin-set-user-password --user-pool-id $COGNITO_USER_POOL_ID --username $ADMINISTRATOR_EMAIL --password $ADMIN_USER_PASSWORD --permanent
    - popd
    - pushd packages/integrationTests
    - rushx test:integration
    - popd

destroyBranch:
  stage: destroyBranch
  rules:
    - *branch-run-cleanup-condition
  script:
    - *common-build-steps
    - pushd packages/infrastructure/platform
    - cdk destroy -c deleteBucket=true -c clusterDeletionProtection=false  -c environment=$ENVIRONMENT  --force --require-approval never --concurrency=5 --r $AWS_CREDS_TARGET_ROLE
    - popd
    - pushd packages/infrastructure/tenant
    - cdk destroy -c deleteBucket=true -c enableDeleteResource=true -c tenantId=$TENANT_ID -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL --require-approval never --force --concurrency=5  --r $AWS_CREDS_TARGET_ROLE --all
    - cdk destroy -c deleteBucket=true -c enableDeleteResource=true -c tenantId=$TENANT_ID-shared -c environment=$ENVIRONMENT -c administratorEmail=$ADMINISTRATOR_EMAIL --require-approval never --force --concurrency=5  --r $AWS_CREDS_TARGET_ROLE --all
    - popd



