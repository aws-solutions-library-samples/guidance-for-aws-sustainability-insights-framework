/*
 *  Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

import { Stack, StackProps } from 'aws-cdk-lib';
import { StringParameter } from 'aws-cdk-lib/aws-ssm';import type { Construct } from 'constructs';
import { calculatorAuditSqsQueueArnParameter } from '../calculator/calculator.construct.js';
import { AuditLogDepositorModule } from './auditLogDepositor.construct.js';
import { NagSuppressions } from 'cdk-nag';
import { bucketNameParameter } from '../shared/s3.construct.js';
import { auditLogDepositorDatabaseNameParameter, auditLogDepositorTableNameParameter } from '../shared/ssm.construct.js';


export type AuditLogDepositorStackProperties = StackProps & {
	tenantId: string;
	environment: string;
};

export class AuditLogDepositorStack extends Stack {
	constructor(scope: Construct, id: string, props?: AuditLogDepositorStackProperties) {
		super(scope, id, props);

		// validation
		this.validateMandatoryParam(props, 'tenantId');
		this.validateMandatoryParam(props, 'environment');

		const auditQueueArn = StringParameter.fromStringParameterAttributes(this, 'auditQueueArn', {
			parameterName: calculatorAuditSqsQueueArnParameter(props.tenantId, props.environment),
			simpleName: false,
		}).stringValue;

		const bucketName = StringParameter.fromStringParameterAttributes(this, 'bucketName', {
			parameterName: bucketNameParameter(props.tenantId, props.environment),
			simpleName: false,
		}).stringValue;

		const auditLogsTableName = StringParameter.fromStringParameterAttributes(this, 'AuditLogsTableName', {
			parameterName: auditLogDepositorTableNameParameter(props.tenantId, props.environment),
			simpleName: false,
		}).stringValue;

		const auditLogsDatabaseName = StringParameter.fromStringParameterAttributes(this, 'AuditLogsDatabaseName', {
			parameterName: auditLogDepositorDatabaseNameParameter(props.tenantId, props.environment),
			simpleName: false,
		}).stringValue;

		new AuditLogDepositorModule(this, 'AuditLogDepositor', {
			tenantId: props.tenantId,
			environment: props.environment,
			auditQueueArn,
			bucketName,
			auditLogsDatabaseName,
			auditLogsTableName
		});

		NagSuppressions.addResourceSuppressionsByPath(
			this,
			['/AuditLogDepositor/AuditLogDepositor/SQSLambda/ServiceRole/Resource','/AuditLogDepositor/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource'],
			[
				{
					id: 'AwsSolutions-IAM4',
					appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],
					reason: 'This policy attached to the role is generated by CDK.',
				},
				{
					id: 'AwsSolutions-IAM5',
					appliesTo: ['Resource::*'],
					reason: 'This resource condition in the IAM policy is generated by CDK, this only applies to logs:DeleteRetentionPolicy and logs:PutRetentionPolicy actions.',
				},
				{
					id: 'AwsSolutions-IAM5',
					appliesTo: ['Action::s3:PutObject*', 's3:Abort*', 's3:DeleteObject*', 's3:GetBucket*', 's3:GetObject*', ':s3:List*', 'Resource::arn:<AWS::Partition>:s3:::<bucketNameParameter>/*'],
					reason: 'This policy is required for the lambda to access the s3 bucket that contains activity audit files.'
				},
			],
			true
		);
	}

	private validateMandatoryParam(props: AuditLogDepositorStackProperties, name: string) {
		if (props[name] === undefined) {
			throw new Error(`${name} is required`);
		}
	}
}
