/*
 *  Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

import { Stack, StackProps } from 'aws-cdk-lib';
import { StringParameter } from 'aws-cdk-lib/aws-ssm';
import type { Construct } from 'constructs';
import { ResourceApiBase } from '../shared/resourceApiBase.construct.js';
import { AccessManagementModule } from './accessManagement.construct.js';
import { AccessManagementSeed } from './accessManagementSeed.construct.js';
import { userPoolIdParameter } from '../shared/cognito.construct.js';
import { eventBusNameParameter } from '../shared/eventbus.construct.js';
import { accessManagementApiFunctionNameParameter } from '../shared/ssm.construct.js';
import { NagSuppressions } from 'cdk-nag';

export type AccessManagementStackProperties = StackProps & {
	tenantId: string;
	environment: string;
	administratorEmail: string;
};

export class AccessManagementStack extends Stack {
	constructor(scope: Construct, id: string, props: AccessManagementStackProperties) {
		super(scope, id, props);

		// validation
		this.validateMandatoryParam(props, 'tenantId');
		this.validateMandatoryParam(props, 'environment');
		this.validateMandatoryParam(props, 'administratorEmail');

		const cognitoUserPoolId = StringParameter.fromStringParameterAttributes(this, 'userPoolId', {
			parameterName: userPoolIdParameter(props.tenantId, props.environment),
			simpleName: false,
		}).stringValue;

		const eventBusName = StringParameter.fromStringParameterAttributes(this, 'eventBusName', {
			parameterName: eventBusNameParameter(props.tenantId, props.environment),
			simpleName: false,
		}).stringValue;

		const accessManagementApiFunctionName = StringParameter.fromStringParameterAttributes(this, 'accessManagementApiFunctionName', {
			parameterName: accessManagementApiFunctionNameParameter(props.tenantId, props.environment),
			simpleName: false,
		}).stringValue;


		const base = new ResourceApiBase(this, 'ResourceApiBase', {
			tenantId: props.tenantId,
			environment: props.environment,
			moduleName: 'accessManagement',
			eventBusName,
		});

		const module = new AccessManagementModule(this, 'AccessManagement', {
			tenantId: props.tenantId,
			environment: props.environment,
			cognitoUserPoolId,
			eventBusName,
			tableName: base.tableName,
			accessManagementApiFunctionName
		});

		module.node.addDependency(base);

		const seeder = new AccessManagementSeed(this, 'DatabaseSeeder', {
			administratorEmail: props.administratorEmail,
			tableName: base.tableName,
		});
		seeder.node.addDependency(module);
		seeder.node.addDependency(base);

		NagSuppressions.addResourceSuppressionsByPath(this, [
				'/AccessManagement/Custom::DynamodbSeederCustomDynamodbSeeder'
			],
			[
				{
					id: 'AwsSolutions-IAM4',
					appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],
					reason: 'This lambda policy and its associated role are generated by CDK.'

				},
				{
					id: 'AwsSolutions-L1',
					reason: 'Waiting for 3rd party to update the run time.'
				}],
			true);

		NagSuppressions.addResourceSuppressionsByPath(this, [
				'/AccessManagement/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource'
			],
			[
				{
					id: 'AwsSolutions-IAM4',
					appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],
					reason: 'This policy attached to the role is generated by CDK.'

				},
				{
					id: 'AwsSolutions-IAM5',
					appliesTo: ['Resource::*'],
					reason: 'The resource condition in the IAM policy is generated by CDK, this only applies to logs:DeleteRetentionPolicy and logs:PutRetentionPolicy actions.'

				}],
			true);
	}

	private validateMandatoryParam(props: AccessManagementStackProperties, name: string) {
		if (props[name] === undefined) {
			throw new Error(`${name} is required`);
		}
	}
}
