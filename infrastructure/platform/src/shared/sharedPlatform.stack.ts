/*
 *  Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

import { Stack, StackProps } from 'aws-cdk-lib';
import { Network, SifVpcConfig } from './network.construct.js';
import { AuroraDatabase } from './aurora.construct.js';
import { VpnClient } from './vpnClient.construct.js';
import { SemaphoreSeeder } from './semaphoreSeeder.construct.js';
import { Semaphore } from './semaphore.construct.js';
import { Ecs } from './ecs.construct.js';
import { NagSuppressions } from 'cdk-nag';
import type { Construct } from 'constructs';
import { Caml } from './caml.construct.js';
import type { InstanceType } from '@aws-cdk/aws-sagemaker-alpha';
import { ResourceManager } from './resourceManager.construct.js';


interface VpnOptions {
	certArn: string;
	clientArn: string;
}

interface CamlOptions {
	camlArtifactBucket: string;
	camlArtifactKey: string;
	camlContainerTag: string,
	camlModelArtifactPath?: string,
	camlInstanceType: InstanceType
}

export type SharedPlatformStackProperties = StackProps & {
	environment: string;
	userVpcConfig?: SifVpcConfig;
	vpnOptions?: VpnOptions;
	camlOptions?: CamlOptions;
	minClusterCapacity: number;
	maxClusterCapacity: number;
	clusterDeletionProtection: boolean;
	deleteBucket?: boolean;
	rdsConcurrencyLimit: number;
	repositoryName?: string;
	repositoryArn?: string;
	imageTag?: string;
};

export class SharedPlatformInfrastructureStack extends Stack {
	constructor(scope: Construct, id: string, props: SharedPlatformStackProperties) {
		super(scope, id, props);

		// validation
		if (props.environment === undefined) {
			throw new Error('environment is required');
		}

		const network = new Network(this, 'Network', {
			environment: props.environment,
			deleteBucket: props.deleteBucket,
			userVpcConfig: props.userVpcConfig ? props.userVpcConfig : undefined
		});

		const lockName = `sif-${props.environment}-lock`;

		if (props.camlOptions) {
			new Caml(this, 'Caml', {
				environment: props.environment,
				camlArtifactBucket: props.camlOptions?.camlArtifactBucket,
				camlArtifactKey: props.camlOptions?.camlArtifactKey,
				camlContainerTag: props.camlOptions?.camlContainerTag,
				camlModelArtifactPath: props.camlOptions?.camlModelArtifactPath,
				camlInstanceType: props.camlOptions?.camlInstanceType
			});
		}

		const semaphore = new Semaphore(this, 'Semaphore', {
			environment: props.environment,
			lockName,
			rdsConcurrencyLimit: props.rdsConcurrencyLimit
		});

		new SemaphoreSeeder(this, 'SemaphoreSeeder', {
			table: semaphore.table,
			lockName
		});

		const auroraDatabase = new AuroraDatabase(this, 'Aurora', {
			vpc: network.vpc,
			sifVpcConfig: network.sifVpcConfig,
			environment: props.environment,
			minClusterCapacity: props.minClusterCapacity,
			maxClusterCapacity: props.maxClusterCapacity,
			clusterDeletionProtection: props.clusterDeletionProtection
		});

		new ResourceManager(this, 'ResourceManager', {
			environment: props.environment,
			eventBus: semaphore.eventBus,
			lockName,
			clusterIdentifier: auroraDatabase.clusterIdentifier,
			rdsConcurrencyLimit: props.rdsConcurrencyLimit,
			semaphoreTable: semaphore.table
		});

		const ecs = new Ecs(this, 'SharedEcsCluster', {
			vpc: network.vpc,
			environment: props.environment,
			repositoryName: props.repositoryName,
			repositoryArn: props.repositoryArn,
			imageTag: props.imageTag
		});

		ecs.node.addDependency(auroraDatabase);

		if (props.vpnOptions) {
			new VpnClient(this, 'Vpn', {
				vpc: network.vpc,
				sifVpcConfig: network.sifVpcConfig,
				environment: props.environment,
				certArn: props.vpnOptions.certArn,
				clientArn: props.vpnOptions.clientArn,
				auroraSecurityGroup: auroraDatabase.auroraSecurityGroup
			});
		}

		NagSuppressions.addResourceSuppressionsByPath(this, [
				'/SharedPlatform/Custom::DynamodbSeederCustomDynamodbSeeder'
			],
			[
				{
					id: 'AwsSolutions-IAM4',
					appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],
					reason: 'This lambda policy and its associated role are generated by CDK.'

				},
				{
					id: 'AwsSolutions-L1',
					reason: 'Waiting for 3rd party to update the run time.'
				}],
			true);

		NagSuppressions.addResourceSuppressionsByPath(this, [
				'/SharedPlatform/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource'
			],
			[
				{
					id: 'AwsSolutions-IAM4',
					appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],
					reason: 'This policy attached to the role is generated by CDK.'

				},
				{
					id: 'AwsSolutions-IAM5',
					appliesTo: ['Resource::*'],
					reason: 'This resource condition in the IAM policy is generated by CDK, this only applies to logs:DeleteRetentionPolicy and logs:PutRetentionPolicy actions.'

				}],
			true);

		if (props.camlOptions) {
			NagSuppressions.addResourceSuppressionsByPath(this, [
				'/SharedPlatform/Caml/CamlContainerModel/Role/DefaultPolicy/Resource'
			],
			[
				{
					id: 'AwsSolutions-IAM5',
					appliesTo: [`Resource::arn:<AWS::Partition>:s3:::cdk-hnb659fds-assets-${this.account}-${this.region}/*`],
					reason: 'This resource condition in the IAM policy is generated by CDK.'

				}],
			true);
		}
	}
}
