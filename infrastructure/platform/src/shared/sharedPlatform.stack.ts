/*
 *  Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

import { Stack, StackProps } from 'aws-cdk-lib';
import type { Construct } from 'constructs';
import { Network } from './network.construct.js';
import { AuroraDatabase } from './aurora.construct.js';
import { VpnClient } from './vpnClient.construct.js';
import { NagSuppressions } from 'cdk-nag';

interface VpnOptions {
	certArn: string;
	clientArn: string;
}

export type SharedPlatformStackProperties = StackProps & {
	environment: string;
	vpnOptions: VpnOptions;
	minClusterCapacity: number;
	maxClusterCapacity: number;
	clusterDeletionProtection: boolean;
	deleteBucket?: boolean;
};

export class SharedPlatformInfrastructureStack extends Stack {
	constructor(scope: Construct, id: string, props: SharedPlatformStackProperties) {
		super(scope, id, props);

		// validation
		if (props.environment === undefined) {
			throw new Error('environment is required');
		}

		const network = new Network(this, 'Network', {
			environment: props.environment,
			deleteBucket: props.deleteBucket
		});

		const auroraDatabase = new AuroraDatabase(this, 'Aurora', {
			vpc: network.vpc,
			environment: props.environment,
			minClusterCapacity: props.minClusterCapacity,
			maxClusterCapacity: props.maxClusterCapacity,
			clusterDeletionProtection: props.clusterDeletionProtection,
		});

		if (props.vpnOptions) {
			new VpnClient(this, 'Vpn', {
				vpc: network.vpc,
				environment: props.environment,
				certArn: props.vpnOptions.certArn,
				clientArn: props.vpnOptions.clientArn,
				auroraSecurityGroup: auroraDatabase.auroraSecurityGroup,
			});
		}

		NagSuppressions.addResourceSuppressionsByPath(this, [
				'/SharedPlatform/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource'
			],
			[
				{
					id: 'AwsSolutions-IAM4',
					appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],
					reason: 'This policy attached to the role is generated by CDK.'

				},
				{
					id: 'AwsSolutions-IAM5',
					appliesTo: ['Resource::*'],
					reason: 'This resource condition in the IAM policy is generated by CDK, this only applies to logs:DeleteRetentionPolicy and logs:PutRetentionPolicy actions.'

				}],
			true);
	}
}
