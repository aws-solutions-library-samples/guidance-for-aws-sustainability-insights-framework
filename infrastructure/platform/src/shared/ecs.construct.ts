/*
 *  Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */


import { Construct } from 'constructs';
import type { IVpc } from 'aws-cdk-lib/aws-ec2';
import { Cluster, ContainerImage, CpuArchitecture, FargateTaskDefinition, LogDriver, OperatingSystemFamily } from 'aws-cdk-lib/aws-ecs';
import { DockerImageAsset, Platform } from 'aws-cdk-lib/aws-ecr-assets';
import path from 'path';
import { fileURLToPath } from 'url';
import { NagSuppressions } from 'cdk-nag';
import * as ssm from 'aws-cdk-lib/aws-ssm';
import { Repository } from 'aws-cdk-lib/aws-ecr';

export const ecsClusterArnParameter = (environment: string) => `/sif/shared/${environment}/ecs/clusterArn`;
export const ecsTaskDefinitionArnParameter = (environment: string) => `/sif/shared/${environment}/ecs/taskDefinitionArn`;
export const ecsTaskRoleArnParameter = (environment: string) => `/sif/shared/${environment}/ecs/taskRoleArn`;
export const ecsTaskExecutionRoleArnParameter = (environment: string) => `/sif/shared/${environment}/ecs/taskExecutionRoleArn`;

export interface EcsConstructProperties {
	vpc: IVpc;
	environment: string;
	repositoryName?: string;
	repositoryArn?: string;
	imageTag?: string;
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);


export class Ecs extends Construct {
	constructor(scope: Construct, id: string, props: EcsConstructProperties) {
		super(scope, id);

		const namePrefix = `sif-${props.environment}`;

		const cluster = new Cluster(this, 'environment-cluster', {
			clusterName: `${namePrefix}-cluster`,
			vpc: props.vpc,
			enableFargateCapacityProviders: true,
			containerInsights: true
		});

		new ssm.StringParameter(this, 'clusterArnParameter', {
			parameterName: ecsClusterArnParameter(props.environment),
			stringValue: cluster.clusterArn
		});

		const schemaMigratorPath = path.join(__dirname, '../../../../typescript/packages/apps/schema-migrator');

		const taskDefinition = new FargateTaskDefinition(this, 'UpdateSchemaTaskDefinition', {
			family: `${namePrefix}-update-schema-task`,
			runtimePlatform: {
				operatingSystemFamily: OperatingSystemFamily.LINUX,
				cpuArchitecture: CpuArchitecture.X86_64
			},
		});

		// Allow user to specify their own repository if they're running cdk in CI/CD that could not run docker in privileged mode
		const containerImage = (props.repositoryArn && props.repositoryName && props.imageTag) ?
			ContainerImage.fromEcrRepository(
				Repository.fromRepositoryAttributes(this, 'SchemaMigratorRepository', {
					repositoryArn: props.repositoryArn, repositoryName: props.repositoryName
				}), props.imageTag) :
			ContainerImage.fromDockerImageAsset(
				new DockerImageAsset(this, 'SchemaMigrator',
					{
						directory: schemaMigratorPath,
						platform: Platform.LINUX_AMD64
					}));

		taskDefinition.addContainer('SchemaMigratorContainer', {
			image: containerImage,
			logging: LogDriver.awsLogs({ streamPrefix: `/ecs/schema-migrator/${props.environment}` })
		});

		new ssm.StringParameter(this, 'taskDefinitionArnParameter', {
			parameterName: ecsTaskDefinitionArnParameter(props.environment),
			stringValue: taskDefinition.taskDefinitionArn
		});

		new ssm.StringParameter(this, 'taskRoleArnParameter', {
			parameterName: ecsTaskRoleArnParameter(props.environment),
			stringValue: taskDefinition.taskRole.roleArn
		});

		new ssm.StringParameter(this, 'taskExecutionRoleArnParameter', {
			parameterName: ecsTaskExecutionRoleArnParameter(props.environment),
			stringValue: taskDefinition?.executionRole?.roleArn!
		});

		NagSuppressions.addResourceSuppressions([taskDefinition?.executionRole!],
			[
				{
					id: 'AwsSolutions-IAM5',
					appliesTo: ['Resource::*'],
					reason: 'This policy is the one generated by CDK.'
				}
			],
			true);
	}
}

