/*
 *  Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

import { AssetMetadata, BaseService } from './base.service';
import type { PipelineMetadata, PipelineOutputKey, S3Location } from '@sif/clients';
import type { Logger } from 'pino';
import type { S3Client } from '@aws-sdk/client-s3';
import type { EventBridgeClient } from '@aws-sdk/client-eventbridge';
import type { DataFabricHelper } from '../../plugins/dataFabricHelper.js';

export interface PartitionKey {
	name: string,
	groupId: string,
	year: string,
	month: string
}

export class MetricExportService extends BaseService {
	protected readonly outputType: string;
	protected readonly assetType: 'metric' | 'activity';

	constructor(protected override log: Logger,
				protected override readonly sifDataBucket: string,
				protected override readonly dataFabricObjectPrefix: string,
				protected override readonly s3Client: S3Client,
				protected override readonly eventBridgeClient: EventBridgeClient,
				protected override readonly dataFabricEventBusArn: string,
				protected readonly accountId: string,
				protected readonly region: string,
				protected override readonly idcEmail: string,
				protected override readonly idcUserId: string,
				protected override dataFabricHelper: DataFabricHelper
	) {

		super(log, sifDataBucket, dataFabricObjectPrefix, s3Client, eventBridgeClient, dataFabricEventBusArn, idcEmail, idcUserId, dataFabricHelper);
		this.outputType = 'parquet';
		this.assetType = 'metric';
	}

	protected override generateAssetMetadata(_pipeline: PipelineMetadata): AssetMetadata {
		return {
			name: 'sustainability_insight_framework_metrics',
			description: `This dataset contains metrics generated by SIF pipeline(s)`,
		};
	}

	protected async importFromS3ToTable(table: string, files: S3Location[]): Promise<PartitionKey[]> {
		this.log.trace(`MetricExportService > importFromS3ToTable >  table: ${table}, files: ${files}`);

		const csvFiles = await Promise.all(files.map(file => {
			return this.downloadFile(file.bucket, file.key);
		}));

		await this.query(`CREATE TABLE ${table} AS SELECT * FROM read_csv([${csvFiles.map(c => `'${c}'`).join(',')}]);`);

		const partitionKeys = await this.query(`SELECT DISTINCT name, groupId, cast( year as varchar) "year", cast( month  as varchar) "month" from ${table}`);

		this.log.trace(`MetricExportService > importFromS3ToTable > exit > partitionKeys: ${partitionKeys}`);

		return partitionKeys as PartitionKey[];
	}

	protected async exportFromTableToS3(table: string, pipelineId: string, fields: PipelineOutputKey[], partitionKeys: PartitionKey[]): Promise<[string, string]> {
		this.log.trace(`MetricExportService > exportFromTableToS3 >  table: ${table},  pipelineId: ${pipelineId}, fields: ${fields}, partitionKeys: ${partitionKeys}`);

		await this.query(`
		SET home_directory='/tmp';
		CREATE SECRET (
			TYPE S3,
			PROVIDER CREDENTIAL_CHAIN
		);`);

		for (const partitionKey of partitionKeys) {
			const mapQuery = `COPY (SELECT
			date,
			createdAt,
			groupValue, subGroupsValue, hierarchyValue
			FROM ${table}
			WHERE name  = '${partitionKey.name}' and groupId = '${partitionKey.groupId}' and year = ${partitionKey.year} and month = ${partitionKey.month})
			TO 's3://${this.sifDataBucket}/${this.dataFabricObjectPrefix}/metrics/metric=${partitionKey.name}/groupId=${encodeURIComponent(partitionKey.groupId)}/year=${partitionKey.year}/month=${partitionKey.month}/data.parquet';
			`;
			await this.query(mapQuery);
		}
		await this.query(`DROP TABLE ${table};`);
		const tableLocation: [string, string] = [this.sifDataBucket, `${this.dataFabricObjectPrefix}/metrics`];
		this.log.trace(`MetricExportService > exportFromTableToS3 >  exit > tableLocation: ${tableLocation}`);
		return tableLocation;
	}
}
