/*
 *  Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */

/* eslint-disable @rushstack/typedef-var */
import { Static, Type } from '@sinclair/typebox';
import { tags, stringEnum, id, activeAt, createdBy, createdAt, updatedBy, updatedAt, state, groups, paginationToken } from '@sif/resource-api-base';

/**
 * Calculation specific path parameters
 */

/**
 * Calculation specific query string parameters
 */
export const dryRunQS = Type.Boolean({
	description: 'Performs a dry run of creating the calculation which includes all the validation steps.',
	default: false,
});

/**
 * Calculation specific resource attributes
 */
export const name = Type.String({
	description: 'Name of calculation. How the calculation is referenced from within a transform.',
});
const summary = Type.String({
	description: 'Concise summary of the calculation.',
});
const description = Type.String({
	description: 'Expanded description of the calculation.',
});
const formula = Type.String({
	description: 'the actual formula representing the calculation. Parameter values are referenced by prefixing the parameter key with `:`.',
});
export const calculationParameter = Type.Object(
	{
		index: Type.Integer({
			description: 'Position of the parameter to be input within the list of parameters provided. Must be unique and in sequence.',
		}),
		key: Type.String({
			description: 'Unique key referencing the parameter. Within the `formula` definition the parameter values are referenced as `:<key>`.',
		}),
		label: Type.Optional(
			Type.String({
				description: 'Human friendly label representing the parameter.',
			})
		),
		description: Type.String({
			description: 'Describes the purpose of the parameter.',
		}),
		type: stringEnum(['string', 'number', 'boolean'], 'Data type of the parameter.'),
	},
	{ $id: 'calculationParameter' }
);
export type CalculationParameter = Static<typeof calculationParameter>;

export const calculationParameters = Type.Array(calculationParameter, {
	description: 'List of parameters required by the formula.',
	$id: 'calculationParameters',
});

export const calculationOutput = Type.Object(
	{
		name: Type.String({ description: 'Unique name of output. Only required for formulas producing multiple outputs.' }),
		description: Type.String({
			description: 'Describes the output generated by the calculation.',
		}),
		type: stringEnum(['string', 'number', 'boolean'], 'Data type of the output.'),
	},
	{ $id: 'calculationOutput' }
);
export type CalculationOutput = Static<typeof calculationOutput>;
export const calculationOutputs = Type.Array(calculationOutput, {
	description: 'List of outputs produced by the formula.',
	$id: 'calculationOutputs',
});

export const version = Type.Integer({
	description: 'Version of the calculation.',
});

/**
 * calculation specific resources
 */
const dryRunOptions = Type.Object({
	data: Type.Array(Type.String(), {
		description: 'dry run options',
	}),
});

export const dryRunResponse = Type.Object(
	{
		headers: Type.Array(
			Type.String({
				description: 'output csv file headers based on specified output for calculation',
			}),
			{
				description: 'list of csv output headers',
			}
		),
		data: Type.Array(
			Type.String({
				description: 'output data items based on dry run options data specified',
			}),
			{
				description: 'list of csv data items',
			}
		),
		errors: Type.Optional(
			Type.Array(
				Type.String({
					description: 'error message',
				}),
				{
					description: 'list of errors',
				}
			)
		),
	},
	{
		$id: 'dryRunResponse',
	}
);

export type DryRunResponse = Static<typeof dryRunResponse>;

export const newCalculationRequestBody = Type.Object(
	{
		name,
		summary,
		description: Type.Optional(description),
		formula,
		parameters: Type.Optional(Type.Ref(calculationParameters)),
		outputs: Type.Ref(calculationOutputs),
		tags: Type.Optional(Type.Ref(tags)),
		dryRunOptions: Type.Optional(dryRunOptions),
		activeAt: Type.Optional(activeAt),
	},
	{ $id: 'newCalculationRequestBody' }
);
export type NewCalculation = Static<typeof newCalculationRequestBody>;

export const editCalculationRequestBody = Type.Object(
	{
		summary: Type.Optional(summary),
		description: Type.Optional(description),
		formula: Type.Optional(formula),
		parameters: Type.Optional(Type.Ref(calculationParameters)),
		outputs: Type.Optional(Type.Ref(calculationOutputs)),
		tags: Type.Optional(Type.Ref(tags)),
		state: Type.Optional(state),
		dryRunOptions: Type.Optional(dryRunOptions),
		activeAt: Type.Optional(activeAt),
	},
	{ $id: 'editCalculationRequestBody' }
);
export type EditCalculation = Static<typeof editCalculationRequestBody>;

export const calculationResource = Type.Object(
	{
		id: id,
		name,
		summary,
		description: Type.Optional(description),
		formula,
		parameters: Type.Optional(Type.Ref(calculationParameters)),
		outputs: calculationOutputs,
		version,
		state,
		groups,
		tags: Type.Optional(Type.Ref(tags)),
		createdBy: createdBy,
		createdAt: createdAt,
		updatedBy: Type.Optional(updatedBy),
		updatedAt: Type.Optional(updatedAt),
		activeAt: Type.Optional(activeAt),
		dryRunOptions: Type.Optional(dryRunOptions),
	},
	{ $id: 'calculationResource' }
);

export const calculationResponse = Type.Union([calculationResource, dryRunResponse], {
	$id: 'calculationResponse',
});

export type Calculation = Static<typeof calculationResource>;

export const calculationsList = Type.Object(
	{
		calculations: Type.Array(Type.Ref(calculationResource)),
		pagination: Type.Optional(
			Type.Object({
				lastEvaluatedToken: Type.Optional(paginationToken),
			})
		),
	},
	{ $id: 'calculationsList' }
);
export type CalculationsList = Static<typeof calculationsList>;

export const calculationVersionsList = Type.Object(
	{
		calculations: Type.Array(Type.Ref(calculationResource)),
		pagination: Type.Optional(
			Type.Object({
				lastEvaluatedVersion: Type.Optional(version),
			})
		),
	},
	{ $id: 'calculationsVersionList' }
);
export type CalculationVersionsList = Static<typeof calculationVersionsList>;
